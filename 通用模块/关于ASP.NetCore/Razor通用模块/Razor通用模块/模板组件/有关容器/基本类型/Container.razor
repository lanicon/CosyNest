@namespace Microsoft.AspNetCore.Components.Container
@using System.ComponentModel
@using System.Collections.Specialized
@using System.Collections
@inherits TemplatedComponents
@typeparam Content

@Template.Invoke(this)

@code
{

#pragma warning disable CS8618
    //这个类型是所有具有子内容的组件的基类
    #region 组件的子内容
    private Content ChildContentFiled;

    /// <summary>
    /// 获取或设置组件的子内容
    /// </summary>
    [Parameter]
    public Content ChildContent
    {
        get => ChildContentFiled;
        set
        {
            #region 用于监听集合元素更改的本地函数
            void ListeningElements(IEnumerable list, bool AddEvent)
                => list.OfType().ForEach(x => Listening(x, AddEvent));
            #endregion
            #region 用于监听集合更改的本地函数
            void ListeningCollection(object sender, NotifyCollectionChangedEventArgs e)
            {
                StateHasChanged();
                if (sender is IEnumerable<INotifyPropertyChanged>)
                    switch (e.Action)
                    {
                        case NotifyCollectionChangedAction.Remove:
                        case NotifyCollectionChangedAction.Add:
                            ListeningElements(e.NewItems!, e.Action == NotifyCollectionChangedAction.Add);
                            break;
                        case NotifyCollectionChangedAction.Replace:
                            ListeningElements(e.OldItems!, false);
                            ListeningElements(e.NewItems!, true);
                            break;
                    }
            }
            #endregion
            #region 监听/取消监听对象状态改变的本地函数
            void Listening(object target, bool AddEvent)
            {
                if (target is INotifyPropertyChanged notify)    //此处不能使用模式匹配，因为target有可能同时实现这三个接口
                {
                    PropertyChangedEventHandler even = (x, y) => StateHasChanged();
                    if (AddEvent)
                        notify.PropertyChanged += even;
                    else notify.PropertyChanged -= even;
                }
                if (target is IEnumerable<INotifyPropertyChanged> list)
                {
                    ListeningElements(list, true);
                }
                if (target is INotifyCollectionChanged notifyList)
                {
                    if (AddEvent)
                        notifyList.CollectionChanged += ListeningCollection!;
                    else notifyList.CollectionChanged -= ListeningCollection!;
                }
            }
            #endregion
            Listening(ChildContentFiled, false);
            Listening(value, true);
            ChildContentFiled = value;
            StateHasChanged();
        }
    }
    #endregion
    #region 静态构造函数
    static Container()
    {
        ProvidedTemplate.CacheTemplate.Add(typeof(Container<RenderFragment>),
            x => y =>
            {
                var render = (Container<RenderFragment>)x;
                render.ChildContent(y);
            });
    }
    #endregion
}
