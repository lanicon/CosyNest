#在满足需求的情况下，接口的成员应越少越好，因为接口越简单，实现接口的自由就越大

#如上一条所述，接口中只应该声明和直接功能有关的API，不应该声明辅助性的API，例如如果有一个有关数据库的接口，那么它不应该声明一个表示连接字符串的属性，因为该属性的目的是为实现功能提供帮助，它应该由接口的实现声明，而不应该出现在接口定义中

#对于功能比较单一，但实现非常复杂的接口（例如用于获取数据的接口），设计原则是：配置复杂，但调用简单，因为复杂的配置可以使经验丰富的开发者控制更多的细节，而简单的调用能够让新手迅速上手，因为他们可以直接使用别人已经配置好的模板

#接口不应该让调用者关注过多细节（例如数据库连接的启用和回收），这些比较琐碎的事情应该在后台自动完成

#接口一般应该公开，但是接口的实现应该尽量不公开，而是统一用一个静态工具类来创建它们，且该静态工具类命名应该以Create开头，这样可以减少公开类型，使程序集看起来不那么复杂

#C#8.0提供了接口的默认实现，它可以减少重复的工作，但是使用不当会使接口变得复杂，因此在使用该语法时，请遵循以下原则：
1.如果某一API是接口本身的公开API，而且该API可以通过调用接口的其他API实现，则该API可以使用默认实现
2.如果某一API不是属于接口本身，而是仅仅为了方便实现接口而提供的辅助，则这些API不能被声明在接口中，更不能提供默认实现，这些API应该放在实现接口的可选基类中

#如果一个接口只有一个方法，那么一般情况下，应该使用委托来代替这个接口的功能，如果这个方法的签名特别复杂，可以考虑使用命名委托