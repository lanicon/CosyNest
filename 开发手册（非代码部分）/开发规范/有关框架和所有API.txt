#本框架的设计理念是：不要求框架具备商业价值，但是要求它能够帮助作者解决工作和生活中的问题，因此：
1.框架不能过于底层，因为工作和生活中的问题通常是比较高层的
2.框架不能过于特化，因为工作和生活中会碰到各种各样的问题，只专注于一件事情的框架无法满足要求

#本项目中的模块被分为两类，一种是开发工具，另一种是开发成品，按照设计，它们应该被严格分开，不能存储在同一位置
开发工具指可以在其他项目中重复使用的模块，它必须严格按照本文所述的规范进行开发，而开发成品可以降低要求

#本文所述的“抽象”和“具象”指的是类型的耦合程度，越抽象的类型对底层了解越少，越具象的类型对底层了解越多，类型从抽象到具象的依次排列为：函数（委托），接口，基类，派生类，结构

#凡是功能相似的类型，要么继承共同的基类，要么实现共同的接口，这样可以将多态带来的好处最大化

#执行上一条规范时，实现共同的接口优先于继承共同的基类，这是为了最大限度的减少耦合，但是UI控件可以不遵循这个原则，因为控件与前端框架的耦合是无法避免的，使用接口带来的好处不明显

#所有API都应该尽量不可变，没有副作用，尤其是涉及多线程的API

#凡是名字比较长或者获取它们开销比较大的属性，方法返回值，如果在同一个作用域中被访问两次，都应该使用一个局部变量将他们缓存起来