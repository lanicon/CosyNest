@namespace Microsoft.AspNetCore.Components
@using System.NetFrancis.Http
@using System.NetFrancis
@using System.Net.Http
@using System.DataFrancis
@using Microsoft.JSInterop
@using System.Net.Http.Headers
@using System.Design.Direct
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Components.Controller
@inject IJSWindow JSWindow
@inject ProvideHttpRequestAsync ProvideHttpRequest
@inject AspNetCore.Routing.LinkGenerator LinkGenerator

<input type="text" @bind="UID" @bind:event="oninput" />
<input type="text" @bind="PWD" @bind:event="oninput" />
<button @onclick="aaa">提交</button>
<p>@Json</p>

@code
{
    //这个组件用于登录
    private string? UID { get; set; }
    private string? PWD { get; set; }
    private string? Json { get; set; }
    private async Task aaa()
    {
        if (UID is null || PWD is null)
            return;
        var cookies = JSWindow.Document.Cookie;

        var template = await ProvideHttpRequest();
        var request = template with
        {
            Uri = template.Uri with
            {
                UriExtended = this.LinkGenerator.GetPathByAction<AuthenticationController>(nameof(AuthenticationController.Login))
            },
            Header = template.Header with
            {
                Authentication = CreateASP.AuthenticationHeader(UID, PWD)
            }
        };
        var Return = (await CreateNet.HttpClient.SendAsync(request)).Content.ToJson<IDirect>(CreateDataObj.JsonOptionsDirect())!;
        if (Return["IsAuthenticated"] is true)
        {
            await cookies.AsyncSetValue(CreateASP.DefaultKeyUserName, UID);
            await cookies.AsyncSetValue(CreateASP.DefaultKeyPassword, PWD);
            await JSWindow.Alert("登陆成功");
            await JSWindow.Location.Reload();
        }
        else await JSWindow.Alert($"登录失败，原因：{Return["Message"]}");
    }
}
